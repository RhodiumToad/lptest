before:
  this_module = 'posix'
  global_table = '_G'

  M = require(this_module)

specify posix.compat:
- context when required:
  - it does not touch the global table:
      expect(show_apis {added_to=global_table, by=this_module}).
         to_equal {}

- describe chmod:
  - before:
      chmod, stat = M.chmod, M.stat
      touch "xxx"
      chmod("xxx", "rwxr-x---")
  - after:
      os.remove "xxx"

  - context with bad arguments: |
      examples {
         ["it diagnoses argument #2 invalid mode"] = function()
            expect(chmod(".", "g+vv")).to_raise.any_of {
               "bad argument #2 to '?' (bad mode)",
               "bad argument #2 to 'chmod' (bad mode)",
            }
         end
      }

      badargs.diagnose(chmod, "chmod(string, string)")

  - it sets file mode with longhand mode string:
      mode = "rw---xr--"
      expect(Emsg(chmod("xxx", mode))).to_be ""
      expect(stat("xxx", "mode")).to_be(mode)
  - "it sets attributes with '='":
      expect(Emsg(chmod("xxx", "o=w"))).to_be ""
      expect(stat("xxx", "mode")).to_be "rwxr-x-w-"
  - "it adds attributes with '+'":
      expect(Emsg(chmod("xxx", "g+w"))).to_be ""
      expect(stat("xxx", "mode")).to_be "rwxrwx---"
  - "it removes attributes with '-'":
      expect(Emsg(chmod("xxx",  "u-r"))).to_be ""
      expect(stat("xxx", "mode")).to_be "-wxr-x---"
  - it accepts comma separated attribute specifications:
      expect(Emsg(chmod("xxx", "a+x,g+w,u-w"))).to_be ""
      expect(stat("xxx", "mode")).to_be "r-xrwx--x"
  - it diagnoses missing files:
      os.remove "xxx"
      expect(Emsg(chmod("xxx", "a=rwx"))).to_contain "No such file or directory"


- describe creat:
  - before:
      creat = M.creat

  - context with bad arguments: |
      badargs.diagnose(creat, "creat(string, string)")

      examples {
         ["it diagnoses argument #2 invalid mode"] = function()
            expect(creat("not/existing", "g+vv")).to_raise.any_of {
               "bad argument #2 to '?' (bad mode)",
               "bad argument #2 to 'creat' (bad mode)",
            }
         end
      }


- describe mkdir:
  - before:
      dir = M.mkdtemp(template)
      chdir, mkdir = M.chdir, M.mkdir
      cwd = M.getcwd()

  - after:
      chdir(cwd)
      rmtmp(dir)

  - context with bad arguments:
      badargs.diagnose(mkdir, "mkdir(string)")

  - it creates the named directory:
      expect(Emsg(mkdir(dir .. "/subdir"))).not_to_contain "exists"
      expect(Emsg(chdir(dir .. "/subdir"))).not_to_contain "No such flle or directory"
  - it diagnoses already existing directory:
      expect(Emsg(mkdir(dir))).to_contain "exists"


- describe mkfifo:
  - before:
      dir    = M.mkdtemp(template)
      mkfifo = M.mkfifo

  - after:
      rmtmp(dir)

  - context with bad arguments:
      badargs.diagnose(mkfifo, "mkfifo(string)")

  - it creates the named fifo:
      expect(Emsg(mkfifo(dir .. "/fifo"))).not_to_contain "exists"
      expect(M.stat(dir .. "/fifo").type).to_be "fifo"
  - it diagnoses already existing fifo:
      expect(Emsg(mkfifo(dir))).to_contain "exists"


- describe msgget:
  - before:
      msgget = M.msgget
      EEXIST, IPC_CREAT, IPC_EXCL = M.EEXIST, M.IPC_CREAT, M.IPC_EXCL

  - context with bad arguments:
      badargs.diagnose(msgget, "msgget(int, ?int, ?string)")

  - it creates a queue:
      if msgget then
         modestr = "rw-rw-rw-"
         mq, err, errnum = msgget(100, bor(IPC_CREAT, IPC_EXCL), modestr)
         if errnum == EEXIST then
            mq, err = msgget(100, 0, modestr)
         end
         expect(mq).not_to_be(nil)
         expect(err).to_be(nil)
      end


- describe open:
  # M.open ignores the mode argument if flags does not include
  # O_CREAT, which `badargs.diagnose` can't express; ergo manual
  # checks here...
  - before:
      O_CREAT = M.O_CREAT
      open, typeerrors = init(posix, "open")

  - 'it diagnoses missing argument #1':
      expect(open()).to_raise.any_of(typeerrors(1, "string"))
  - 'it diagnoses argument #1 type not string':
      expect(open(false)).to_raise.any_of(typeerrors(1, "string", "boolean"))
  - 'it diagnoses missing argument #2':
      expect(open("not/existing")).to_raise.any_of(typeerrors(2, "int"))
  - 'it diagnoses argument #2 type not int':
      expect(open("not/existing", false)).
        to_raise.any_of(typeerrors(2, "int", "boolean"))
  - 'it diagnoses missing argument #3':
      expect(open("not/existing", O_CREAT)).
        to_raise.any_of(typeerrors(3, "string"))
  - 'it diagnoses argument #3 type not string':
      expect(open("not/existing", O_CREAT, false)).
        to_raise.any_of(typeerrors(3, "string", "boolean"))
  - 'it diagnoses argument #3 invalid mode': |
      expect(open("not/existing", O_CREAT, "g+vv")).to_raise.any_of {
          "bad argument #3 to '?' (bad mode)",
          "bad argument #3 to 'open' (bad mode)",
      }
  - 'it diagnoses too many arguments':
      expect(open("not/existing", -1, "o-s", false)).to_raise.any_of(typeerrors(4))


- describe setlogmask:
  - context with bad arguments:
      if M.setlogmask then
         badargs.diagnose(M.setlogmask, "setlogmask(?int*)")
      end


- describe umask:
  - before:
      stat, umask = M.stat, M.umask
      saved = umask()
      umask "rwxr-x---"

      dir = M.mkdtemp(template)

  - after:
      rmtmp(dir)
      umask(saved)

  - context with bad arguments: |
      examples {
         ["it diagnoses argument #1 invalid mode"] = function()
            expect(umask("g+vv")).to_raise.any_of {
               "bad argument #1 to '?' (bad mode)",
               "bad argument #1 to 'umask' (bad mode)",
            }
         end
      }

      badargs.diagnose(umask, "umask(?string)")

  - it returns current umask:
      expect(umask()).to_be "rwxr-x---"
  - "it sets attributes with '='":
      expect(umask "a=r").to_be "r--r--r--"
  - "it adds attributes with '+'":
      expect(umask "g+w").to_be "rwxrwx---"
  - "it removes attributes with '-'":
      expect(umask "u-r").to_be "-wxr-x---"
  - it accepts comma separated attribute specifications:
      expect(umask "a+r,g+w,u-x").to_be "rw-rwxr--"
  - it controls the mode of newly created files:
      xxx, mode = dir .. "/xxx", "rw--w-r--"
      umask(mode)
      touch(xxx)
      expect(stat(xxx, "mode")).to_be(mode)
      os.remove(xxx)
